---
export interface Props {
  title: string;
  description: string;
  id: number;
}

const { title, description, id } = Astro.props;
---

<div
  style={`animation-delay: ${(id - 1) * 0.1}s`}
  data-sal="true"
  data-sal-once
  class={"atropos skill-card group atropos-initializer-" + id}
  style={`--shadowColorAtropos: '#000'`}
>
  <div class="atropos-scale">
    <div class="atropos-rotate">
      <div class="atropos-inner">
        <div class="screen-like-box">
          <div class="box-overlay bg-gradient-custom transition-all opacity-20">
          </div>
          <div class="grid">
            <h4
              class="fs-md text-gray-50 group-hover:text-white font-semibold uppercase text-center"
              data-atropos-offset="1"
            >
              {title}
            </h4>
            <div class="divider"></div>
            <div data-atropos-offset="-1">
              <p
                class="fs-base text-center text-slate-200 font-normal mb-2 transition-colors transition-opacity group-hover:opacity-90 group-hover:text-slate-100"
              >
                {description}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style is:global>
  .box-overlay {
    height: 100%;
    width: 100%;
    position: absolute;
    z-index: 0;
    left: 0px;
    top: 0px;
  }

  [data-sal].skill-card {
    opacity: 0;
  }

  [data-sal].skill-card.sal-animate {
    animation: fadeInUp 0.5s ease-in-out forwards;
  }

  @keyframes fadeInUp {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0px);
    }
  }

  .skill-card .atropos-highlight {
    background-image: radial-gradient(
      circle at 50%,
      hsl(var(--primary-hsl) / 5%),
      transparent 30%
    );
  }

  .screen-like-box {
    /* min-width: 577px;
		width: min(600px, 80vw); */
    border: 3px solid hsl(var(--primary-hsl) / 80%);
    border-radius: 1rem;
    background-color: hsl(var(--primary-hsl) / 20%);
    overflow: hidden;
    position: relative;
    z-index: 10;
    box-shadow:
      0px 0px 5px 2px hsl(var(--primary-hsl) / 20%),
      var(--shadow-elevation-medium);
    margin: 20px;
    height: calc(100% - 40px);
  }

  .screen-like-box > div.grid {
    display: grid;
    gap: 2rem;
    position: relative;
    align-content: space-evenly;
    place-items: center;
    padding-inline: calc(var(--fs-md) * 1);
    padding-block: calc(var(--fs-md) * 0.75);
    border: 1px solid hsl(var(--primary-hsl) / 50%);
    border-radius: 0.6rem;
    margin: 1rem;
    height: calc(100% - 2rem);
  }

  .screen-like-box:after,
  .screen-like-box:before {
    content: "";
    height: 3px;
    position: absolute;
    z-index: 4;
    left: 50%;
    translate: -50% 0%;
    background-color: white;
  }

  .screen-like-box:before {
    width: 17%;
    top: 0;
    border-bottom-left-radius: 1rem;
    border-bottom-right-radius: 1rem;
  }

  .screen-like-box:after {
    width: 22%;
    bottom: 0;
    border-top-left-radius: 1rem;
    border-top-right-radius: 1rem;
  }

  .screen-like-box .divider {
    height: 1px;
    width: 27%;
    background-color: hsl(var(--primary-hsl));
    border-radius: 1rem;
    box-shadow: 0px 0px 5px 2px hsl(var(--primary-hsl) / 3px0%);
    height: 2px;
  }
</style>
