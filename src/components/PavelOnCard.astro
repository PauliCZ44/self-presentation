---
import me from '../images/me.png'
---

<div class="screen">
	<div class="img-wrapper">
		<img class="screen-image" src={me} />
	</div>
	<div class="screen-overlay"></div>
	<div class="screen-content">
		<div class="screen-user">
			<span class="name" data-value="PAVEL ŠŤASTNÝ">P??EL Š?T?N?A</span>
			<div class="divider"></div>
			<p class="title">Front-end developer</p>
		</div>
	</div>
</div>

<script>
	/* -- Text effect -- */
	const letters = 'ABCČDĎEFGHIJKLMNOPQRŘSŠTŤUVWXYZ0123456789'

	let interval: any = null
	let lastAnimationTimestamp = 0
	const screen = document.querySelector('.screen')! as HTMLElement
	const name = document.querySelector('.name')! as HTMLElement
	window.addEventListener('load', handleMouseEnter)

	function handleMouseEnter() {
		if (Date.now() - lastAnimationTimestamp > 10000) {
			lastAnimationTimestamp = Date.now()
		} else {
			return
		}

		let iteration = 0

		clearInterval(interval)

		// If 10 second passed from previous animation, start new one

		interval = setInterval(() => {
			name.innerText = name?.innerText
				.split('')
				.map((letter: string, index: number) => {
					if (index < iteration || letter === ' ') {
						// @ts-ignore
						return name.dataset.value[index]
					}

					return letters[Math.floor(Math.random() * 26)]
				})
				.join('')
			// @ts-ignore
			if (iteration >= name.dataset.value.length) {
				clearInterval(interval)
			}

			iteration += 1 / 3
		}, 40)
	}

	screen.closest('.atropos')!.addEventListener('mouseenter', handleMouseEnter)
</script>

<style lang="scss">
	:root {
		--blue-rgb: 66 49 185;
		--primary-rgb: var(--blue-rgb);
	}
	.screen {
		min-width: 577px;
		width: min(600px, 80vw);
		display: flex;
		border: 3px solid rgb(var(--primary-rgb) / 80%);
		aspect-ratio: 3/4;
		border-radius: 1rem;
		background-color: rgb(var(--primary-rgb) / 15%);
		overflow: hidden;
		position: relative;
		z-index: 10;
		box-shadow: 0px 0px 8px 3px rgb(var(--primary-rgb) / 60%), var(--shadow-elevation-high);
		margin: 100px;
	}

	.screen:after,
	.screen:before {
		content: '';
		height: 5px;
		position: absolute;
		z-index: 4;
		left: 50%;
		translate: -50% 0%;
		background-color: white;
	}

	.screen:before {
		width: 15%;
		top: 0rem;
		border-bottom-left-radius: 1rem;
		border-bottom-right-radius: 1rem;
	}

	.screen:after {
		width: 25%;
		bottom: 0rem;
		border-top-left-radius: 1rem;
		border-top-right-radius: 1rem;
	}

	@keyframes pan-overlay {
		from {
			background-position: 0% 0%;
		}

		to {
			background-position: 0% -100%;
		}
	}

	.screen-overlay {
		background: linear-gradient(
			rgb(var(--primary-rgb) / 0.15),
			rgb(var(--primary-rgb) / 0.15) 3px,
			transparent 3px,
			transparent 9px
		);
		background-size: 100% 9px;
		height: 100%;
		width: 100%;
		animation: pan-overlay 32s infinite linear;
		position: absolute;
		z-index: 2;
		left: 0px;
		top: 0px;
	}

	.screen {
		.img-wrapper {
			height: auto;
			width: calc(100% - 2rem);
			position: absolute;
			right: 1rem;
			bottom: 1rem;
			overflow: hidden;
			border-radius: 0.6rem;
		}
		.screen-image {
			// background-image: url('https://images.unsplash.com/photo-1515266591878-f93e32bc5937?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2574&q=80');
			height: auto;
			width: 100%;
			transform: translateY(10px) scale(1);
			transition: transform 0.25s ease-in-out, filter 0.25s ease-in-out;
			filter: sepia(100%) contrast(130%) brightness(90%) grayscale(60%);
		}
	}

	.screen > .screen-content {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: flex-start;
		flex-grow: 1;
		gap: 4rem;
		position: relative;
		z-index: 3;
		margin: 1rem;
		padding-bottom: 6rem;
		border: 1px solid rgb(var(--primary-rgb) / 50%);
		border-radius: 0.6rem;
	}

	.screen > .screen-content > .screen-icon {
		color: white;
		font-size: 4rem;
		text-shadow: 0px 0px 0.5rem white;
	}

	.screen > .screen-content > .screen-user {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 1rem;
		position: relative;
	}

	.screen > .screen-content .divider {
		height: 1px;
		width: 33%;
		background-color: rgb(var(--primary-rgb));
		border-radius: 1rem;
		box-shadow: 0px 0px 8px 3px rgb(var(--primary-rgb) / 60%);
		height: 2px;
	}

	.screen > .screen-content > .screen-user > :is(.name, .title) {
		font-family: 'Source Code Pro', monospace;
		color: white;
		text-align: center;
		text-transform: uppercase;
	}

	.screen > .screen-content > .screen-user > .name {
		margin-top: 1.5rem;
		line-height: 1.1;
		position: relative;
		font-size: 4.25rem;
		font-weight: 400;
		transform: scaleX(0.8);
	}

	.screen > .screen-content > .screen-user > .name:before,
	.screen > .screen-content > .screen-user > .name:after {
		content: '';
		position: absolute;
		top: calc(50% - 0.25rem);
		height: 0.5rem;
		width: 0.5rem;
		position: absolute;
		border: 2px solid white;
		border-radius: 3px;
	}

	.screen > .screen-content > .screen-user > .name:before {
		right: -1.5rem;
	}

	.screen > .screen-content > .screen-user > .name:after {
		left: -1.5rem;
	}

	.screen > .screen-content > .screen-user > .title {
		opacity: 0.8;
		font-size: 1.5rem;
		text-shadow: 0px 0px 0.5rem white;
		font-weight: 400;
		letter-spacing: 0.3rem;
	}

	@media (max-width: 700px) {
		.screen {
			scale: 0.6;
			margin-bottom: 0rem;
		}
	}
</style>
