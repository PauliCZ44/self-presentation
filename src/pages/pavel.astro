---
import Layout from '../layouts/Layout.astro'
import PavelOnCard from '../components/PavelOnCard.astro'
import AtroposWrapper from '../components/AtroposWrapper.astro'
import 'atropos/css'
import '../global.css'
const wrapperClass = ''
const headingClasses =
	'fs-lg mb-4 text-slate-400 group-hover:text-slate-200 font-thin uppercase text-center'
---

<Layout title="Hello">
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;700&family=Source+Code+Pro:wght@400;500;700&display=swap"
		rel="stylesheet"
	/>
	<script async src="https://cdn.jsdelivr.net/npm/lax.js"></script>
	<script src="../scripts/swirl.js"></script>
	<div class="relative w-full h-full">
		<div class="content--canvas"></div>
		<div class="absolute w-full h-full top-0 left-0 flex items-center justify-center">
			<div
				class="transition-transform ease-linear duration-[50ms] rounded-md"
				style={{ transform: 'translateY(calc(var(--scrollY) * -0.33px)' }}
			>
				<AtroposWrapper shadowColor="#00000055">
					<PavelOnCard />
				</AtroposWrapper>
			</div>
		</div>
	</div>

	<div class="w-full min-h-full flex items-center justify-center gradient-bg">
		<div class="grid-wrapper-boxes h-full grid gap-8 leading-none">
			<div class="screen-like-box group">
				<div>
					<h4 class={headingClasses}>React Enthusiast</h4>
					<p
						class="fs-base text-center text-slate-200 font-medium opacity-80 mb-2 group-hover:opacity-90 group-hover:text-slate-100"
					>
						I'm passionate Front-end developer, mainly focused on developing React applications.
					</p>
				</div>
			</div>
			<div class="screen-like-box group">
				<div>
					<h4 class={headingClasses}>Quality driven</h4>
					<div
						class="fs-base text-center text-slate-200 font-medium opacity-80 mb-2 group-hover:opacity-90 group-hover:text-slate-100"
					>
						My main goal is to create a great user experience and make make the apps accessible,
						efficient, and user-friendly.
					</div>
				</div>
			</div>
			<div class="screen-like-box group">
				<div>
					<h4 class={headingClasses + 'scale-x-90'}>Professional</h4>
					<div
						class="fs-base text-center text-slate-200 font-medium opacity-80 mb-2 group-hover:opacity-90 group-hover:text-slate-100"
					>
						I write clean, readable, and maintainable code that adheres to the best industry
						standards.
					</div>
				</div>
			</div>
			<div class="screen-like-box group">
				<div>
					<h4 class={headingClasses}>Continuous learner</h4>
					<div
						class="fs-base text-center text-slate-200 font-medium opacity-80 mb-2 group-hover:opacity-90 group-hover:text-slate-100"
					>
						I am constantly learning and staying up-to-date with the latest technologies and trends
						to ensure that my work is always up to date.
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	function doOnScroll(e: Event) {
		document.body.style.setProperty('--scrollY', `${e?.target?.scrollTop}`)
	}

	function handleScroll(e: Event) {
		// use requestAnimationFrame to throttle scroll callbacks
		window.requestAnimationFrame(() => doOnScroll(e))
	}
	document.body.addEventListener('scroll', function (e) {
		handleScroll(e)
	})
</script>

<style is:global>
	html,
	body,
	.content--canvas {
		overflow-x: hidden;
		overflow-y: auto;
		margin: 0;
		width: 100%;
		height: 100%;
		background-color: black;
	}

	.atropos:hover .screen-image {
		transform: translateY(0px) scale(1.05);
		filter: sepia(40%) contrast(130%) brightness(95%) grayscale(20%);
	}

	/* // random like movement */
	@keyframes pan-overlay {
		0% {
			background-position: 50% 50%;
		}

		20% {
			background-position: 75% 60%;
		}

		40% {
			background-position: 100% 80%;
		}

		60% {
			background-position: 75% 70%;
		}

		80% {
			background-position: 64% 62%;
		}

		100% {
			background-position: 50% 50%;
		}
	}

	.grid-wrapper-boxes {
		max-width: 80vw;
	}

	.screen-like-box {
		/* min-width: 577px;
		width: min(600px, 80vw); */
		border: 3px solid rgb(var(--primary-rgb) / 80%);
		border-radius: 1rem;
		background-color: rgb(var(--primary-rgb) / 15%);
		overflow: hidden;
		position: relative;
		z-index: 10;
		box-shadow: 0px 0px 8px 3px rgb(var(--primary-rgb) / 60%), var(--shadow-elevation-medium);
		margin: 20px;
	}

	.screen-like-box * {
		transition: all 0.4s ease-in-out;
	}

	.screen-like-box > div {
		display: grid;
		place-items: center;
		padding-inline: calc(var(--fs-md) * 1);
		padding-block: calc(var(--fs-md) * 0.75);
		border: 1px solid rgb(var(--primary-rgb) / 50%);
		border-radius: 0.6rem;
		margin: 1rem;
	}

	.screen-like-box:after,
	.screen-like-box:before {
		content: '';
		height: 3px;
		position: absolute;
		z-index: 4;
		left: 50%;
		translate: -50% 0%;
		background-color: white;
	}

	.screen-like-box:before {
		width: 20%;
		top: 0;
		border-bottom-left-radius: 1rem;
		border-bottom-right-radius: 1rem;
	}

	.screen-like-box:after {
		width: 30%;
		bottom: 0;
		border-top-left-radius: 1rem;
		border-top-right-radius: 1rem;
	}

	.gradient-bg {
		background: repeating-linear-gradient(
				213deg,
				rgb(0, 0, 0) 0px,
				rgb(0, 0, 0) 23px,
				transparent 23px,
				transparent 25px
			),
			repeating-linear-gradient(
				164deg,
				rgb(0, 0, 0) 0px,
				rgb(0, 0, 0) 23px,
				transparent 23px,
				transparent 25px
			),
			repeating-linear-gradient(
				430deg,
				rgb(0, 0, 0) 0px,
				rgb(0, 0, 0) 23px,
				transparent 23px,
				transparent 25px
			),
			linear-gradient(190deg, rgb(131, 86, 251), rgb(72, 127, 246));
		background-size: 50vw 50vh;
		animation: pan-overlay 32s infinite linear;
	}
</style>
