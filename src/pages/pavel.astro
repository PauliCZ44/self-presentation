---
import Layout from '../layouts/Layout.astro'
import PavelOnCard from '../components/PavelOnCard.astro'
import AtroposWrapper from '../components/AtroposWrapper.astro'
import 'atropos/css'
import '../global.css'
import SkillCard from '../components/SkillCard.astro'
const wrapperClass = ''
---

<Layout title="Hello">
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;700&family=Source+Code+Pro:wght@400;500;700&display=swap"
		rel="stylesheet"
	/>
	<script async src="https://cdn.jsdelivr.net/npm/lax.js"></script>
	<script src="../scripts/swirl.js"></script>
	<div class="relative w-full h-full min-h-[600px] sm:min-h-[1000px]">
		<div class="content--canvas"></div>
		<!-- // at small we want to have 60% of 1000 = 600 -->
		<div class="absolute w-full h-full top-0 left-0 flex items-center justify-center">
			<div
				class="transition-transform ease-linear duration-[50ms] rounded-md"
				style={{ transform: 'translateY(calc(var(--scrollY) * -0.33px)' }}
			>
				<AtroposWrapper shadowColor="#00000055">
					<PavelOnCard />
				</AtroposWrapper>
			</div>
		</div>
	</div>

	<div class="w-full min-h-full flex items-center justify-center gradient-bg">
		<div class="grid-wrapper-boxes h-full grid leading-none">
			<SkillCard
				id={1}
				title={'React Enthusiast'}
				description={"I'm passionate Front-end developer, mainly focused on developing React applications."}
			/>

			<SkillCard
				id={2}
				title={'Quality oriented'}
				description={'My main goal is to create a great user experience and make make the apps accessible, efficient, and user-friendly.'}
			/>

			<SkillCard
				id={3}
				title={'Professional'}
				description={'I write clean, readable, and maintainable code that adheres to the best industrystandards.'}
			/>

			<SkillCard
				id={4}
				title={'Continuous learner'}
				description={'I am constantly learning and staying up-to-date with the latest technologies and trends to ensure that my work is always up to date.'}
			/>
		</div>
	</div>
</Layout>

<script>
	import Atropos from 'atropos'

	function doOnScroll(e: Event) {
		document.body.style.setProperty('--scrollY', `${e?.target?.scrollTop}`)
	}
	function handleScroll(e: Event) {
		// use requestAnimationFrame to throttle scroll callbacks
		window.requestAnimationFrame(() => doOnScroll(e))
	}
	document.body.addEventListener('scroll', function (e) {
		handleScroll(e)
	})

	const cardCount = 4
	for (let i = 0; i <= cardCount; i++) {
		Atropos({
			el: `.atropos-initializer-${i}`,
			activeOffset: 10,
			shadowScale: 1.05,
			rotateXMax: 10,
			rotateYMax: 10,
		})
	}
</script>

<style is:global>
	html,
	body,
	.content--canvas {
		overflow-x: hidden;
		overflow-y: auto;
		margin: 0;
		width: 100%;
		height: 100%;
		background-color: black;
	}

	.atropos:hover .screen-image {
		transform: translateY(0px) scale(1.05);
		filter: sepia(40%) contrast(130%) brightness(95%) grayscale(20%);
	}

	/* // random like movement */
	@keyframes pan-overlay {
		0% {
			background-position: 50% 50%;
		}

		20% {
			background-position: 75% 60%;
		}

		40% {
			background-position: 100% 80%;
		}

		60% {
			background-position: 75% 70%;
		}

		80% {
			background-position: 64% 62%;
		}

		100% {
			background-position: 50% 50%;
		}
	}

	.grid-wrapper-boxes {
		max-width: min(90vw, 68rem);
		min-height: min(75vh, 60rem);
		grid-template: 1fr 1fr / 1fr 1fr;
		gap: calc(var(--fs-md) * 1.5);
		/* grid-template-columns: repeat(auto-fit, minmax(25vw, 28rem)); */
		/* grid-auto-rows: minmax(25vh, 20rem); */
	}

	.gradient-bg {
		background: repeating-linear-gradient(
				213deg,
				rgb(0, 0, 0) 0px,
				rgb(0, 0, 0) 23px,
				transparent 23px,
				transparent 25px
			),
			repeating-linear-gradient(
				164deg,
				rgb(0, 0, 0) 0px,
				rgb(0, 0, 0) 23px,
				transparent 23px,
				transparent 25px
			),
			repeating-linear-gradient(
				430deg,
				rgb(0, 0, 0) 0px,
				rgb(0, 0, 0) 23px,
				transparent 23px,
				transparent 25px
			),
			linear-gradient(190deg, rgb(131, 86, 251), rgb(72, 127, 246));
		background-size: 50vw 50vh;
		animation: pan-overlay 32s infinite linear;
	}
</style>
